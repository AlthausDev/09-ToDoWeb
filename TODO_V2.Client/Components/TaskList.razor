 @page "/todo/{Id}"
@using TODO_V2.Client.Data
@using TODO_V2.Shared.Models
@using TODO_V2.Shared.Models.Enum
<PageTitle>ToDo List!</PageTitle>

@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ILocalStorageService storageService


<Modal @ref="ModalInstance" Size="ModalSize.Regular" ShowCloseButton="false" UseStaticBackdrop="true" IsVerticallyCentered="true" />

<ConfirmDialog @ref="dialog" />

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" StackLength="5" Placement="ToastsPlacement.TopRight" />

<div class="main-container">
    <nav class="upper-buttons">
        <button type="button" class="button-style" @onclick="() => OnClickTaskForm(null)">Nueva Tarea</button>        
    </nav>

    @RenderLoadingIndicator()

    @if (!isLoading)
    {

        <Grid TItem="TaskItem"
              AllowFiltering="false"
              AllowPaging="true"
              PageSize="15"
              AllowRowClick="true"
              AllowSorting="true"
              HeaderRowCssClass="bg-black text-black"
              DataProvider="UsersDataProvider"
              OnRowClick="SelectTaskItem"
              Responsive="true"
              class="table rounded-grid"
              @ref="DataGrid">

            <GridColumn TItem="TaskItem" HeaderText="Tarea" PropertyName="Name" SortKeySelector="item => item.Name" IsDefaultSortColumn="true">
                @context.Name
            </GridColumn>

            <GridColumn TItem="TaskItem" HeaderText="Categoria" PropertyName="CategoryId" SortKeySelector="item => item.CategoryId">
                @CategoryDictionary.GetCategoryName(@context.CategoryId)
            </GridColumn>

            <GridColumn TItem="TaskItem" HeaderText="Fecha Creacion" PropertyName="Nombre" SortKeySelector="item => item.CreatedAt" TextNoWrap="true">
                @context.CreatedAt.ToString("dd/MM/yyyy")
            </GridColumn>

            <GridColumn TItem="TaskItem" HeaderText="Fecha Vencimiento" PropertyName="Fecha Vencimiento" SortKeySelector="item => item.ExpirationDate" TextNoWrap="true">
                @context.ExpirationDate?.ToString("dd/MM/yyyy")
            </GridColumn>

            <GridColumn TItem="TaskItem" HeaderText="Estado" PropertyName="Estado" SortKeySelector="item => item.StateId">
                @((TaskStateEnum)@context.StateId)
            </GridColumn>


            <GridColumn TItem="TaskItem" HeaderText="Opciones" PropertyName="Opciones">
                <div class="options-container">
                    <button class="option-button" @onclick="() => OnClickTaskForm(context)">Editar</button>
                    <button class="option-button" @onclick="() => DeleteTaskAsync(context)">Eliminar</button>
                </div>
            </GridColumn>
        </Grid>
    }
</div>


<section id="bottom" />

<script>
    var mybutton = document.getElementById("scrollBtn");
    var mybuttonTop = document.getElementById("scrollBtnDown");

    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            mybutton.style.display = "block";
        } else {
            mybutton.style.display = "none";
        }
    }

    window.addEventListener('scroll', (e) => {
        const body = document.body;
        const parent = body.parentElement;
        const pixelsFromBottom = body.scrollHeight - parent.clientHeight - 50;

        if (parent.scrollTop < pixelsFromBottom) {
            mybuttonTop.style.display = "block";
        } else {
            mybuttonTop.style.display = "none";
        }
    });

    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }

    function bottomFuction() {
        document.getElementById('bottom').scrollIntoView({ behavior: 'smooth' });
    }
</script>


